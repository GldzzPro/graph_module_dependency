<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <!-- Main Component Template -->
    <t t-name="module_graphe_template">
        <div class="o_module_graph">
            <div class="row">
                <!-- Module List Component -->
                <div class="col-md-3">
                    <ModuleListComponent 
                        nodes="state.nodes"
                        filteredNodes="filteredNodes"
                        stateFilter="state.stateFilter"
                        isModuleSelected="isModuleSelected"
                        isModuleInGraph="isModuleInGraph"
                        onClickModule="onClickModule"
                        onToggleState="onToggleState"
                        onInputKeyup="onInputKeyup"
                        onChangeColor="onChangeColor"
                    />
                </div>

                <!-- Right Column for Controls and Graph -->
                <div class="col-md-9">
                    <!-- Graph Controls Component -->
                    <GraphControlsComponent 
                        state="state"
                        availableStates="state.availableStates"
                        availableCategories="state.availableCategories"
                        selectedStates="state.selectedStates"
                        selectedCategories="state.selectedCategories"
                        toggleDropdown="toggleDropdown"
                        onClickOutside="onClickOutside"
                        toggleFilterMode="toggleFilterMode"
                        toggleSelection="toggleSelection"
                        clearSelections="clearSelections"
                        setApplicationFilter="setApplicationFilter"
                        getApplicationFilterCount="getApplicationFilterCount"
                        getModuleTypeFilterCount="getModuleTypeFilterCount"
                        setModuleTypeFilter="setModuleTypeFilter"
                        stringifyDomain="stringifyDomain"
                        onChangeMaxDepth="onChangeMaxDepth"
                        clearStopConditions="clearStopConditions"
                        onClearGraph="onClearGraph"
                    />

                    <!-- Graph Canvas Component -->
                    <GraphCanvasComponent
                        setupNetwork="setupNetwork"
                        graphRef="containerRef"
                    />
                </div>
            </div>
        </div>
    </t>

    <!-- Module List Template -->
    <t t-name="module_list_template">
        <div class="module_graph_nav">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search modules..."
                    t-on-keyup="props.onInputKeyup" />
                <div class="input-group-append">
                    <span class="input-group-text">
                        <i class="fa fa-search" />
                    </span>
                </div>
            </div>
            <!-- Color Palette Configuration -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0">State Filter</h5>
                </div>
                <div class="card-body">
                    <div class="form-group" t-foreach="Object.keys(props.stateFilter)" t-as="stateType"
                        t-key="stateType">
                        <label>
                            <span t-esc="stateType" class="mr-2" />
                            <label class="switch">
                                <input type="checkbox" t-att-checked="props.stateFilter[stateType]"
                                    t-on-change="props.onToggleState" t-att-data-state="stateType" />
                                <span class="slider round" />
                            </label>
                        </label>
                    </div>
                </div>
            </div>
            <t t-if="props.nodes.length > 0">
            <ul class="list-group module_graph_nav_list">
                <t t-foreach="props.filteredNodes" t-as="node" t-key="node.id">
                    <li t-att-class="props.isModuleSelected(node.id) ? 'list-group-item module_selected' : 'list-group-item'"
                        t-att-data-id="node.id" t-att-data-label="node.label" t-on-click="props.onClickModule">
                        <img t-att-src="node.icon" t-attf-class="rounded-circle o_object_fit_cover"
                            width="24" height="24" />
                        <label class="list-desc">
                            <t t-esc="node.shortdesc" /> (
                            <t t-esc="node.label" />)
                        </label>
                            <!-- Only display the color input when node.color exists -->
                        <t t-if="props.isModuleInGraph(node.id)">
                            <input type="color" class="form-control form-control-sm"
                                t-att-value="node.color" t-att-data-id="node.id"
                                t-on-change="props.onChangeColor" />
                        </t>
                    </li>
                </t>
            </ul>
             </t>

        </div>
    </t>

    <!-- Graph Controls Template -->
    <t t-name="graph_controls_template">
        <div class="o_module_graph_controls mb-3">
            <div class="row mt-3">
                <div class="col-12">
                    <h5>Stop Conditions</h5>
                </div>
                <div class="col-md-1">
                    <div class="form-group">
                        <label for="maxDepth">Maximum Depth</label>
                        <input type="number" class="form-control" id="maxDepth" t-att-value="props.state.maxDepth"
                            t-on-change="props.onChangeMaxDepth" min="0" />
                        <small class="text-muted">0 means no limit</small>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="module-filters" t-on-click-outside="props.onClickOutside">
                        <div class="d-flex mb-3">
                            <!-- State Dropdown -->
                            <div class="dropdown me-2" t-ref="dropdownState">
                                <button class="btn btn-outline-secondary dropdown-toggle"
                                    t-on-click="() => props.toggleDropdown('state')">
                                    <span>States</span>
                                    <t t-if="props.selectedStates.length > 0">
                                        <span class="badge bg-primary ms-2">
                                            <t t-esc="props.selectedStates.length" />
                                        </span>
                                    </t>
                                </button>

                                <div t-if="props.state.stateDropdownOpen" class="dropdown-menu show p-2"
                                    style="min-width: 250px;">
                                    <div
                                        class="dropdown-header d-flex justify-content-between align-items-center">
                                        <span>Filter by States</span>
                                        <button t-if="props.selectedStates.length > 0"
                                            class="btn btn-sm btn-link text-danger"
                                            t-on-click="() => props.clearSelections('state')">
                                            <i class="fa fa-times" /> Clear
                                        </button>
                                    </div>

                                    <!-- Filter Mode Toggle -->
                                    <div class="mb-2 d-flex justify-content-center">
                                        <div class="btn-group btn-group-sm">
                                            <button
                                                t-att-class="'btn ' + (props.state.stateFilterMode ? 'btn-primary' : 'btn-outline-primary')"
                                                t-on-click="() => { props.toggleFilterMode('state') }">
                                                is one of
                                            </button>
                                            <button
                                                t-att-class="'btn ' + (!props.state.stateFilterMode ? 'btn-primary' : 'btn-outline-primary')"
                                                t-on-click="() => { props.toggleFilterMode('state') }">
                                                is not one of
                                            </button>
                                        </div>
                                    </div>

                                    <div class="dropdown-divider"></div>
                                    <div class="filter-options">
                                        <t t-foreach="Array.from(props.availableStates.entries())"
                                            t-as="stateEntry" t-key="stateEntry[0]">
                                            <div
                                                class="form-check d-flex justify-content-between align-items-center">
                                                <div>
                                                    <input type="checkbox" class="form-check-input"
                                                        t-att-id="'state-' + stateEntry[0]"
                                                        t-att-checked="props.selectedStates.includes(stateEntry[0])"
                                                        t-on-change="() => props.toggleSelection('state', stateEntry[0])" />
                                                    <label class="form-check-label"
                                                        t-att-for="'state-' + stateEntry[0]">
                                                        <t t-esc="stateEntry[0]" />
                                                    </label>
                                                </div>
                                                <span class="badge bg-secondary">
                                                    <t t-esc="stateEntry[1]" />
                                                </span>
                                            </div>
                                        </t>
                                    </div>
                                </div>
                            </div>

                            <!-- Category Dropdown -->
                            <div class="dropdown" t-ref="dropdownCategory">
                                <button class="btn btn-outline-secondary dropdown-toggle"
                                    t-on-click="() => props.toggleDropdown('category')">
                                    <span>Categories</span>
                                    <t t-if="props.selectedCategories.length > 0">
                                        <span class="badge bg-primary ms-2">
                                            <t t-esc="props.selectedCategories.length" />
                                        </span>
                                    </t>
                                </button>

                                <div t-if="props.state.categoryDropdownOpen" class="dropdown-menu show p-2"
                                    style="min-width: 250px;">
                                    <div
                                        class="dropdown-header d-flex justify-content-between align-items-center">
                                        <span>Filter by Categories</span>
                                        <button t-if="props.selectedCategories.length > 0"
                                            class="btn btn-sm btn-link text-danger"
                                            t-on-click="() => props.clearSelections('category')">
                                            <i class="fa fa-times" /> Clear
                                        </button>
                                    </div>

                                    <!-- Filter Mode Toggle -->
                                    <div class="mb-2 d-flex justify-content-center">
                                        <div class="btn-group btn-group-sm">
                                            <button
                                                t-att-class="'btn ' + (props.state.categoryFilterMode ? 'btn-primary' : 'btn-outline-primary')"
                                                t-on-click="() => { props.toggleFilterMode('category') }">
                                                is one of
                                            </button>
                                            <button
                                                t-att-class="'btn ' + (!props.state.categoryFilterMode ? 'btn-primary' : 'btn-outline-primary')"
                                                t-on-click="() => { props.toggleFilterMode('category') }">
                                                is not one of
                                            </button>
                                        </div>
                                    </div>

                                    <div class="dropdown-divider"></div>
                                    <div class="filter-options"
                                        style="max-height: 300px; overflow-y: auto;">
                                        <t t-foreach="Array.from(props.availableCategories.entries())"
                                            t-as="categoryEntry" t-key="categoryEntry[0]">
                                            <div
                                                class="form-check d-flex justify-content-between align-items-center">
                                                <div>
                                                    <input type="checkbox" class="form-check-input"
                                                        t-att-id="'category-' + categoryEntry[0]"
                                                        t-att-checked="props.selectedCategories.includes(categoryEntry[0])"
                                                        t-on-change="() => props.toggleSelection('category', categoryEntry[0])" />
                                                    <label class="form-check-label"
                                                        t-att-for="'category-' + categoryEntry[0]">
                                                        <t t-esc="categoryEntry[1].name" />
                                                    </label>
                                                </div>
                                                <span class="badge bg-secondary">
                                                    <t t-esc="categoryEntry[1].count" />
                                                </span>
                                            </div>
                                        </t>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Application Filter Chips -->
                        <div class="application-filter mb-3">
                            <div class="d-flex gap-2">
                                <button
                                    t-att-class="'btn btn-sm ' + (props.state.applicationFilter === null ? 'btn-primary' : 'btn-outline-primary')"
                                    t-on-click="() => props.setApplicationFilter(null)">
                                    All
                                    <span class="badge bg-white text-primary ms-1">
                                        <t t-esc="props.state.nodes.length" />
                                    </span>
                                </button>

                                <button
                                    t-att-class="'btn btn-sm ' + (props.state.applicationFilter === true ? 'btn-success' : 'btn-outline-success')"
                                    t-on-click="() => props.setApplicationFilter(true)">
                                    Applications
                                    <span class="badge bg-white text-success ms-1">
                                        <t t-esc="props.getApplicationFilterCount(true)" />
                                    </span>
                                </button>

                                <button
                                    t-att-class="'btn btn-sm ' + (props.state.applicationFilter === false ? 'btn-info' : 'btn-outline-info')"
                                    t-on-click="() => props.setApplicationFilter(false)">
                                    Modules
                                    <span class="badge bg-white text-info ms-1">
                                        <t t-esc="props.getApplicationFilterCount(false)" />
                                    </span>
                                </button>
                                <!-- Module Type Filters - Commented out in original -->
                                <!-- <button
                                    t-att-class="'btn btn-sm ' + (props.state.moduleTypeFilter === null ? 'btn-primary' :
                                'btn-outline-primary')"
                                    t-on-click="() => props.setModuleTypeFilter(null)">
                                    All
                                    <span class="badge bg-white text-primary ms-1">
                                        <t t-esc="props.state.nodes.length" />
                                    </span>
                                </button>

                                <button
                                    t-att-class="'btn btn-sm ' + (props.state.applicationFilter === 'official' ? 'btn-success' :
                                'btn-outline-success')"
                                    t-on-click="() => props.setModuleTypeFilter('official')">
                                    Official Apps
                                    <span class="badge bg-white text-success ms-1">
                                        <t t-esc="props.getModuleTypeFilterCount('official')" />
                                    </span>
                                </button>

                                <button
                                    t-att-class="'btn btn-sm ' + (props.state.applicationFilter === 'industries' ? 'btn-info' :
                                'btn-outline-info')"
                                    t-on-click="() => props.setModuleTypeFilter('industries')">
                                    industries
                                    <span class="badge bg-white text-info ms-1">
                                        <t t-esc="props.getApplicationFilterCount('industries')" />
                                    </span>
                                </button> -->
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <!-- Active Filters Display -->
                    <div t-if="props.selectedStates.length > 0 || props.selectedCategories.length > 0 || props.state.applicationFilter !== null"
                        class="active-filters mb-3">
                        <span class="text-muted me-2">Active filters:</span>

                        <!-- State filters -->
                        <t t-if="props.selectedStates.length > 0">
                            <span class="badge bg-light text-dark me-2">
                                State
                                <t t-esc="props.state.stateFilterMode ? 'is one of' : 'is not one of'" />:
                            </span>
                            <t t-foreach="props.selectedStates" t-as="stateName" t-key="stateName">
                                <span class="badge bg-primary me-1">
                                    <t t-esc="stateName" />
                                    <i class="fa fa-times ms-1"
                                        t-on-click="() => props.toggleSelection('state', stateName)" />
                                </span>
                            </t>
                        </t>

                        <!-- Category filters -->
                        <t t-if="props.selectedCategories.length > 0">
                            <span class="badge bg-light text-dark me-2">
                                Category
                                <t t-esc="props.state.categoryFilterMode ? 'is one of' : 'is not one of'" />:
                            </span>
                            <t t-foreach="props.selectedCategories" t-as="categoryId" t-key="categoryId">
                                <span class="badge bg-info text-dark me-1">
                                    <t t-esc="props.availableCategories.get(categoryId).name" />
                                    <i class="fa fa-times ms-1"
                                        t-on-click="() => props.toggleSelection('category', categoryId)" />
                                </span>
                            </t>
                        </t>

                        <!-- Application filter -->
                        <t t-if="props.state.applicationFilter !== null">
                            <span class="badge bg-light text-dark me-2">
                                Type:
                            </span>
                            <span
                                t-att-class="'badge me-1 ' + (props.state.applicationFilter ? 'bg-success' : 'bg-info')">
                                <t t-esc="props.state.applicationFilter ? 'Applications' : 'Modules'" />
                                <i class="fa fa-times ms-1"
                                    t-on-click="() => props.setApplicationFilter(null)" />
                            </span>
                        </t>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-12">
                    <!-- Domain Display (for debugging) -->
                    <div style="width: 100%;" class="mb-3 text-muted small" t-if="props.state.domain.length > 0">
                        <strong>Stop Condition Domain:</strong>
                        <t t-esc="props.stringifyDomain()" />
                    </div>
                    <button class="btn btn-danger" t-on-click="props.onClearGraph">Clear Graph</button>
                    <button class="btn btn-secondary ml-2" t-on-click="props.clearStopConditions">
                        Clear Stop Conditions
                    </button>
                </div>
            </div>
        </div>
    </t>

    <!-- Graph Canvas Template -->
    <t t-name="graph_canvas_template">
        <div class="module_graph_container border" t-ref="graph" style="height: 600px;" />
    </t>
</templates>